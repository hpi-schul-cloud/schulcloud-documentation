"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[3104],{3295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"backend/Coding-Guidelines/controllers","title":"Controller","description":"A modules api layer is defined within of controllers.","source":"@site/docs/backend/Coding-Guidelines/controllers.md","sourceDirName":"backend/Coding-Guidelines","slug":"/backend/Coding-Guidelines/controllers","permalink":"/docs/backend/Coding-Guidelines/controllers","draft":false,"unlisted":false,"editUrl":"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/backend/Coding-Guidelines/controllers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/docs/backend/Coding-Guidelines/configuration"},"next":{"title":"Deprecation Workflow","permalink":"/docs/backend/Coding-Guidelines/deprection-workflow"}}');var i=t(4848),o=t(8453);const r={},a="Controller",d={},l=[{value:"JWT-Authentication",id:"jwt-authentication",level:2},{value:"Validation",id:"validation",level:2},{value:"DTOs",id:"dtos",level:2},{value:"DTO File naming",id:"dto-file-naming",level:3},{value:"openAPI specification",id:"openapi-specification",level:3},{value:"Mapping",id:"mapping",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"controller",children:"Controller"})}),"\n",(0,i.jsxs)(n.p,{children:["A modules api layer is defined within of ",(0,i.jsx)(n.a,{href:"https://docs.nestjs.com/controllers",children:"controllers"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The main responsibilities of a controller is to define the REST API interface as openAPI specification and map DTO's to match the logic layers interfaces."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-TypeScript",children:"@ApiTags('News')\n@JwtAuthentication()\n@Controller('news')\nexport class NewsController {\n\tconstructor(private readonly newsUc: NewsUc) {}\n    \n    @ApiOperation({ summary: 'some descriptive information that will show up in the API documentation' })\n    @ApiResponse({ status: 200, type: BoardResponse })\n    @ApiResponse({ status: 400, type: ApiValidationError })\n    @ApiResponse({ status: 403, type: ForbiddenException })\n    @ApiResponse({ status: 404, type: NotFoundException })\n    @Post()\n    async create(@CurrentUser() currentUser: ICurrentUser, @Body() params: CreateNewsParams): Promise<NewsResponse> {\n        const news = await this.newsUc.create(\n            currentUser.userId,\n            currentUser.schoolId,\n            NewsMapper.mapCreateNewsToDomain(params)\n        );\n        const dto = NewsMapper.mapToResponse(news);\n\n        return dto;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"jwt-authentication",children:"JWT-Authentication"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.strong,{children:"authentication"}),", use ",(0,i.jsx)(n.a,{href:"https://docs.nestjs.com/guards",children:"guards"})," like JwtAuthGuard. It can be applied to a whole controller or a single controller method only. Then, the authenticated user can be injected using the ",(0,i.jsx)(n.code,{children:"@CurrentUser()"})," decorator."]}),"\n",(0,i.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,i.jsxs)(n.p,{children:["Global settings of the core-module ensure ",(0,i.jsx)(n.strong,{children:"request/response validation"})," against the api definition. Simple input types might additionally use a custom ",(0,i.jsx)(n.a,{href:"https://docs.nestjs.com/pipes",children:"pipe"})," while for complex types injected as query/body are validated by default when parsed as DTO class."]}),"\n",(0,i.jsx)(n.h2,{id:"dtos",children:"DTOs"}),"\n",(0,i.jsx)(n.p,{children:"All data that leaves or enters the system has to be defined and typed using DTOs."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export class CreateNewsParams {\n    @IsString()\n    @SanitizeHtml()\n    @ApiProperty({\n        description: 'Title of the News entity',\n    })\n    title!: string;\n\n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dto-file-naming",children:"DTO File naming"}),"\n",(0,i.jsx)(n.p,{children:"Complex input DTOs are defined like [create-news].params.ts (class-name: CreateNewsParams)."}),"\n",(0,i.jsx)(n.p,{children:"When DTO's are shared between multiple modules, locate them in the layer-related shared folder."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Security:"})," When exporting data, internal entities must be mapped to a response DTO class named like [news].response.dto. The mapping ensures which data of internal entities are exported."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"openapi-specification",children:"openAPI specification"}),"\n",(0,i.jsxs)(n.p,{children:["Defining the request/response DTOs in a controller will define the openAPI specification automatically. Additional ",(0,i.jsx)(n.a,{href:"https://docs.nestjs.com/techniques/validation",children:"validation rules"})," and ",(0,i.jsx)(n.a,{href:"https://docs.nestjs.com/openapi/decorators",children:"openAPI definitions"})," can be added using decorators. For simplification, openAPI decorators should define a type and if a property is required, while additional decorators can be used from class-validator to validate content."]}),"\n",(0,i.jsx)(n.h3,{id:"mapping",children:"Mapping"}),"\n",(0,i.jsx)(n.p,{children:"You should define a mapper to easily create dtos from the uc responses, and the datatypes expected by ucs from params."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);