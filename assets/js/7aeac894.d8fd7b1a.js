"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[2036],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,a(a({ref:t},s),{},{components:n})):r.createElement(g,a({ref:t},s))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5432:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={},a="Defining Entities",l={unversionedId:"backend/Coding-Guidelines/micro-orm",id:"backend/Coding-Guidelines/micro-orm",title:"Defining Entities",description:"When defining entities with MikroORM (Version 5), the following should be considered:",source:"@site/docs/backend/Coding-Guidelines/micro-orm.md",sourceDirName:"backend/Coding-Guidelines",slug:"/backend/Coding-Guidelines/micro-orm",permalink:"/docs/backend/Coding-Guidelines/micro-orm",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/backend/Coding-Guidelines/micro-orm.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/docs/backend/Coding-Guidelines/logging"},next:{title:"Implementation and usage of modules, submodule and barrel files in our project",permalink:"/docs/backend/Coding-Guidelines/modules-submodules"}},c={},p=[],s={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"defining-entities"},"Defining Entities"),(0,o.kt)("p",null,"When defining entities with MikroORM (Version 5), the following should be considered:\nThe property decorator requires explicit assignment of the type to the property and may not work correctly when working with type inference or assigning union types to a property. In these cases, the metadata may not be set correctly, which can lead to exceptions, for example, when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"em.assign()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"em.aggregate()")," functions."),(0,o.kt)("p",null,"Therefore, the following is ",(0,o.kt)("strong",{parentName:"p"},"not")," sufficient:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"},"  @Property()\n  termsAccepted = false;\n\n @Property()\n createdAt = new Date();\n\n")),(0,o.kt)("p",null,"The following works:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property()\n termsAccepted: boolean = false;\n\n @Property()\n createdAt: Date = new Date();\n\n")),(0,o.kt)("p",null,"The better way is to provide the type through the decorator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property({ type: 'boolean' })\n termsAccepted = false;\n\n @Property({ type: Date })\n createdAt = new Date();\n\n")),(0,o.kt)("p",null,"Errors can also occur when specifying multiple types (union types):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Poperty({ nullable: true })\n dueDate: Date | null;\n\n")),(0,o.kt)("p",null,"To set the metadata correctly, do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property({ type: Date, nullable: true })\n dueDate: Date | null;\n\n")),(0,o.kt)("p",null,"If type inference is not used, specifying the type through the property decorator is not necessary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property()\n name: string;\n\n")))}d.isMDXComponent=!0}}]);