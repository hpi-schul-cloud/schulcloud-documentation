"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[5896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8411:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l="Git",i={unversionedId:"schulcloud-server/Development/git",id:"schulcloud-server/Development/git",title:"Git",description:"Branch name conventions",source:"@site/docs/schulcloud-server/Development/git.md",sourceDirName:"schulcloud-server/Development",slug:"/schulcloud-server/Development/git",permalink:"/docs/schulcloud-server/Development/git",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/schulcloud-server/Development/git.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration state and flows",permalink:"/docs/schulcloud-server/Configuration"},next:{title:"ErWIn-IDM (Keycloak)",permalink:"/docs/schulcloud-server/Development/keycloak"}},s={},c=[{value:"Branch name conventions",id:"branch-name-conventions",level:2},{value:"Commit message conventions",id:"commit-message-conventions",level:2},{value:"Windows",id:"windows",level:2}],u={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git"},"Git"),(0,a.kt)("h2",{id:"branch-name-conventions"},"Branch name conventions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each change should be done in a ticket (no matter how small)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The ticket does not need to be refined for very small things"),(0,a.kt)("li",{parentName:"ul"},"Might be relevant for reporting later"))),(0,a.kt)("li",{parentName:"ul"},"Folder (feature/..) should no longer be used"),(0,a.kt)("li",{parentName:"ul"},"Stay below 64 letters",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Do not simply use ticket title, usually we need a shorter description :-)"))),(0,a.kt)("li",{parentName:"ul"},"Ticket number needs to be uppercase (",(0,a.kt)("em",{parentName:"li"},"BC"),"-1234)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Related to matching with Jira"),(0,a.kt)("li",{parentName:"ul"},"Careful: namespace is lowercase")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"BC-XXXX-kebab-case-short-description\n")),(0,a.kt)("h2",{id:"commit-message-conventions"},"Commit message conventions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Squashed commit subject should start with a ticket number, and end with a PR number"),(0,a.kt)("li",{parentName:"ul"},"Clean body (contains all commits by default)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Only leave changes relevant for main"),(0,a.kt)("li",{parentName:"ul"},"Remove commits likes 'fix for linter', 'add tests', 'fix review comments'"),(0,a.kt)("li",{parentName:"ul"},"See example below"))),(0,a.kt)("li",{parentName:"ul"},"Write commit messages in imperative and active",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'Good: "make the code better"'),(0,a.kt)("li",{parentName:"ul"},'Bad: "made the code better", "makes the code better"'))),(0,a.kt)("li",{parentName:"ul"},"Feel free to write actual text")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"BC-1993 - lesson lernstore and geogebra copy (#3532)\n \nIn order to make sure developers in the future can find out why changes have been made,\nwe would like some descriptive text here that explains what we did and why.\n \n- change some important things\n- change some other things\n- refactor some existing things\n \n# I dont need to mention tests, changes that didnt make it to main, linter, or other fixups\n# only leave lines that are relevant changes compared to main\n# comments like this will not actually show up in the git history\n")),(0,a.kt)("h2",{id:"windows"},"Windows"),(0,a.kt)("p",null,"We strongly recommend to let git translate line endings. Please set ",(0,a.kt)("inlineCode",{parentName:"p"},"git config --global --add core.autocrlf input")," when working with windows."))}p.isMDXComponent=!0}}]);