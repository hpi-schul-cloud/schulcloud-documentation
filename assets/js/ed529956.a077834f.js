"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[7566],{1709:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"services/schulcloud-server/our nextjs modules/room-member-module/index","title":"Room Member Module","description":"The Room Member module manages the association between users and rooms, handling permissions and roles within rooms. This module is designed to be injected into the Room module for managing user access and roles within rooms.","source":"@site/docs/services/schulcloud-server/our nextjs modules/room-member-module/index.md","sourceDirName":"services/schulcloud-server/our nextjs modules/room-member-module","slug":"/services/schulcloud-server/our nextjs modules/room-member-module/","permalink":"/docs/services/schulcloud-server/our nextjs modules/room-member-module/","draft":false,"unlisted":false,"editUrl":"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/services/schulcloud-server/our nextjs modules/room-member-module/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/docs/services/schulcloud-server/Getting started"},"next":{"title":"How it works","permalink":"/docs/services/collabora/How it works"}}');var n=s(4848),i=s(8453);const t={},l="Room Member Module",d={},a=[{value:"Model Relationships",id:"model-relationships",level:2},{value:"RoomMemberEntity",id:"roommemberentity",level:3},{value:"GroupEntity",id:"groupentity",level:3},{value:"GroupUserEmbeddable",id:"groupuserembeddable",level:3},{value:"Key Points",id:"key-points",level:2},{value:"Service",id:"service",level:2},{value:"Usage",id:"usage",level:2},{value:"API",id:"api",level:2}];function c(e){const o={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"room-member-module",children:"Room Member Module"})}),"\n",(0,n.jsx)(o.p,{children:"The Room Member module manages the association between users and rooms, handling permissions and roles within rooms. This module is designed to be injected into the Room module for managing user access and roles within rooms."}),"\n",(0,n.jsx)(o.h2,{id:"model-relationships",children:"Model Relationships"}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.img,{alt:"Room Member Module Relationships",src:s(4123).A+"",width:"2089",height:"903"})}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsx)(o.li,{children:"Room have one RoomMembers"}),"\n",(0,n.jsx)(o.li,{children:"RoomMember have one UserGroup"}),"\n",(0,n.jsx)(o.li,{children:"UserGroup have many Users"}),"\n",(0,n.jsx)(o.li,{children:"Each User in UserGroup have Role"}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"This make room membership easy manage. Can give different roles to users in same room."}),"\n",(0,n.jsx)(o.h3,{id:"roommemberentity",children:"RoomMemberEntity"}),"\n",(0,n.jsxs)(o.p,{children:["The core entity of this module is the ",(0,n.jsx)(o.code,{children:"RoomMemberEntity"}),", which represents a user's membership in a room."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:"@Entity({ tableName: 'room-members' })\nexport class RoomMemberEntity extends BaseEntityWithTimestamps implements RoomMemberProps {\n    @Property()\n    @Index()\n    roomId!: ObjectId;\n\n    @OneToOne(() => GroupEntity, { owner: true, orphanRemoval: true })\n    userGroup!: GroupEntity;\n\n    @Property({ persist: false })\n    domainObject: RoomMember | undefined;\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["The important part is the ",(0,n.jsx)(o.code,{children:"userGroup"})," property."]}),"\n",(0,n.jsxs)(o.p,{children:["We store the the members using the ",(0,n.jsx)(o.code,{children:"Group"})," module.\nWhy? => Because that allows us to assign each user a separate role within the room.",(0,n.jsx)(o.br,{}),"\n","e.g. ROOM_EDITOR, ROOM_VIEWER, ..."]}),"\n",(0,n.jsx)(o.p,{children:"These roles are not related to the user's global role."}),"\n",(0,n.jsx)(o.h3,{id:"groupentity",children:"GroupEntity"}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"userGroup"})," property uses the ",(0,n.jsx)(o.code,{children:"GroupEntity"})," from the Group module. This structure allows for multiple users to be associated with a room through a single group."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:"class GroupEntity {\n    id: EntityId;\n    name: string;\n    users: GroupUserEmbeddable[];\n    // other properties...\n}\n"})}),"\n",(0,n.jsx)(o.h3,{id:"groupuserembeddable",children:"GroupUserEmbeddable"}),"\n",(0,n.jsxs)(o.p,{children:["Each user in the group is represented by a ",(0,n.jsx)(o.code,{children:"GroupUserEmbeddable"}),":"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:"class GroupUserEmbeddable {\n    user: User;\n    role: Role;\n}\n"})}),"\n",(0,n.jsx)(o.p,{children:"This structure allows for flexible assignment of roles to users within the context of a room."}),"\n",(0,n.jsx)(o.h2,{id:"key-points",children:"Key Points"}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["The ",(0,n.jsx)(o.code,{children:"RoomMemberEntity"})," doesn't directly store user IDs or roles. Instead, it uses a ",(0,n.jsx)(o.code,{children:"GroupEntity"})," to manage this information."]}),"\n",(0,n.jsx)(o.li,{children:"This design allows for easy management of multiple users and roles for a single room."}),"\n",(0,n.jsxs)(o.li,{children:["The ",(0,n.jsx)(o.code,{children:"roomId"})," is stored directly on the ",(0,n.jsx)(o.code,{children:"RoomMemberEntity"})," for efficient querying of members for a specific room."]}),"\n",(0,n.jsxs)(o.li,{children:["The ",(0,n.jsx)(o.code,{children:"domainObject"})," property facilitates the separation between the database entity and the domain object. This is an optimization to not loose the unit of work using mikro-orm."]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"This structure provides a flexible and scalable way to manage room memberships, allowing for complex permission and role scenarios within rooms."}),"\n",(0,n.jsx)(o.h2,{id:"service",children:"Service"}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"RoomMemberService"})," is a service for the ",(0,n.jsx)(o.code,{children:"RoomMember"})," entity. It provides methods for creating, updating, and deleting ",(0,n.jsx)(o.code,{children:"RoomMember"})," entities."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:"class RoomMemberService {\n\tconstructor(private readonly roomMembersRepo: RoomMemberRepo) {}\n}\n"})}),"\n",(0,n.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"RoomMemberService"})," is designed to be injected into the ",(0,n.jsx)(o.code,{children:"Room"})," module for managing user access and roles within rooms."]}),"\n",(0,n.jsx)(o.h2,{id:"api",children:"API"}),"\n",(0,n.jsx)(o.p,{children:"There is no API for now. Member specific writes/reads can be implemented by adding an API to the RoomMember module.\nLike adding/removing users to a room."})]})}function m(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},4123:(e,o,s)=>{s.d(o,{A:()=>r});const r=s.p+"assets/images/p1.excalidraw-8c28bf06109189ad63a5c0b0ee5ab3ec.png"},8453:(e,o,s)=>{s.d(o,{R:()=>t,x:()=>l});var r=s(6540);const n={},i=r.createContext(n);function t(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);