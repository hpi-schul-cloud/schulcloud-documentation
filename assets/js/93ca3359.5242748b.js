"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[8183],{2764:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"backend/Coding-Guidelines/logging","title":"Logging","description":"For logging use the Logger, exported by the logger module. It encapsulates a Winston logger. Its injection scope is transient, so you can set a context when you inject it.","source":"@site/docs/backend/Coding-Guidelines/logging.md","sourceDirName":"backend/Coding-Guidelines","slug":"/backend/Coding-Guidelines/logging","permalink":"/docs/backend/Coding-Guidelines/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/backend/Coding-Guidelines/logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Exception Handling","permalink":"/docs/backend/Coding-Guidelines/exception-handling"},"next":{"title":"Defining Entities","permalink":"/docs/backend/Coding-Guidelines/micro-orm"}}');var t=o(4848),r=o(8453);const i={},l="Logging",g={},a=[{value:"Log levels and error logging",id:"log-levels-and-error-logging",level:2},{value:"Legacy logger",id:"legacy-logger",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"logging",children:"Logging"})}),"\n",(0,t.jsxs)(n.p,{children:["For logging use the Logger, exported by the logger module. It encapsulates a ",(0,t.jsx)(n.a,{href:"https://github.com/winstonjs/winston",children:"Winston"})," logger. Its ",(0,t.jsx)(n.a,{href:"https://docs.nestjs.com/fundamentals/injection-scopes",children:"injection scope"})," is transient, so you can set a context when you inject it."]}),"\n",(0,t.jsxs)(n.p,{children:["For better privacy protection and searchability of logs, the logger cannot log arbitrary strings but only so called ",(0,t.jsx)(n.strong,{children:"loggables"}),". If you want to log something you have to use or create a loggable that implements the ",(0,t.jsx)(n.code,{children:"Loggable"})," interface."]}),"\n",(0,t.jsxs)(n.p,{children:["The message should be fixed in each loggable. If you want to log further data, put in the data field of the ",(0,t.jsx)(n.code,{children:"LogMessage"}),", like in the example below."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-TypeScript",children:"export class YourLoggable implements Loggable {\n    constructor(private readonly userId: EntityId) {}\n\n    getLogMessage(): LogMessage {\n        return {\n            message: 'I am a log message.',\n            data: { userId: this.userId, },\n        };\n    }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-TypeScript",children:"import { Logger } from '@src/core/logger';\n\nexport class YourUc {\n    constructor(private logger: Logger) {\n        this.logger.setContext(YourUc.name);\n    }\n\n    public sampleUcMethod(user) {\n        this.logger.log(new YourLoggable({ userId: user.id }));\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This produces a logging output like"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"[NestWinston] Info - 2023-05-31 15:20:30.888   [YourUc] {  message: 'I am a log message.',  data: {   userId: '0000d231816abba584714c9e'  }}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"log-levels-and-error-logging",children:"Log levels and error logging"}),"\n",(0,t.jsxs)(n.p,{children:["The logger exposes the methods ",(0,t.jsx)(n.code,{children:"log"}),", ",(0,t.jsx)(n.code,{children:"warn"}),", ",(0,t.jsx)(n.code,{children:"debug"})," and ",(0,t.jsx)(n.code,{children:"verbose"}),". It does not expose an ",(0,t.jsx)(n.code,{children:"error"})," method because we don't want errors to be logged manually. All errors are logged in the exception filter."]}),"\n",(0,t.jsx)(n.h2,{id:"legacy-logger",children:"Legacy logger"}),"\n",(0,t.jsxs)(n.p,{children:["While transitioning to the new logger for loggables, the old logger for strings is still available as ",(0,t.jsx)(n.code,{children:"LegacyLogger"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var s=o(6540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);