"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[3855],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(h,s(s({ref:n},c),{},{components:t})):r.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7715:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={},s="API design",i={unversionedId:"backend/Api",id:"backend/Api",title:"API design",description:"nest.js",source:"@site/docs/backend/Api.md",sourceDirName:"backend",slug:"/backend/Api",permalink:"/docs/backend/Api",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/backend/Api.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Backend",permalink:"/docs/category/backend"},next:{title:"Access legacy Code",permalink:"/docs/backend/Coding-Guidelines/access-legacy-code"}},l={},p=[{value:"nest.js",id:"nestjs",level:2},{value:"Responses",id:"responses",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-design"},"API design"),(0,a.kt)("h2",{id:"nestjs"},"nest.js"),(0,a.kt)("p",null,"In nest.js all apis are defined in controllers.\nUsually the api follows the following syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"/api/v3/<resource>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each controller is responsible for a specific resource. "),(0,a.kt)("li",{parentName:"ul"},"The controller is responsible for the routing and the validation of the request."),(0,a.kt)("li",{parentName:"ul"},"The controller calls a service to handle the request. "),(0,a.kt)("li",{parentName:"ul"},"The service is responsible for the business logic. "),(0,a.kt)("li",{parentName:"ul"},"The service calls a repository to access the database. "),(0,a.kt)("li",{parentName:"ul"},"The repository is responsible for the database access.")),(0,a.kt)("h2",{id:"responses"},"Responses"),(0,a.kt)("p",null,"When returning a response like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"    @ApiOperation({ summary: 'Create a new element on a card.' })\n    @ApiExtraModels(\n        ExternalToolElementResponse,\n        FileElementResponse,\n        LinkElementResponse,\n        RichTextElementResponse,\n        SubmissionContainerElementResponse\n    )\n    @ApiResponse({\n        status: 201,\n        schema: {\n            oneOf: [\n                { $ref: getSchemaPath(ExternalToolElementResponse) },\n                { $ref: getSchemaPath(FileElementResponse) },\n                { $ref: getSchemaPath(LinkElementResponse) },\n                { $ref: getSchemaPath(RichTextElementResponse) },\n                { $ref: getSchemaPath(SubmissionContainerElementResponse) },\n            ],\n        },\n    })\n    @ApiResponse({ status: 400, type: ApiValidationError })\n    @ApiResponse({ status: 403, type: ForbiddenException })\n    @ApiResponse({ status: 404, type: NotFoundException })\n    @Post(':cardId/elements')\n    async createElement(\n        @Param() urlParams: CardUrlParams,\n        @Body() bodyParams: CreateContentElementBodyParams,\n        @CurrentUser() currentUser: ICurrentUser\n    ): Promise<AnyContentElementResponse> {\n        const { type, toPosition } = bodyParams;\n        const element = await this.cardUc.createElement(currentUser.userId, urlParams.cardId, type, toPosition);\n        const response = ContentElementResponseFactory.mapToResponse(element);\n\n        return response;\n    }\n")),(0,a.kt)("p",null,"We want to use decorators to explain the intent of the response.",(0,a.kt)("br",{parentName:"p"}),"\n","The ",(0,a.kt)("inlineCode",{parentName:"p"},"@ApiOperation")," decorator is used to define the summary.",(0,a.kt)("br",{parentName:"p"}),"\n","The ",(0,a.kt)("inlineCode",{parentName:"p"},"@ApiResponse")," decorator is used to define the response.",(0,a.kt)("br",{parentName:"p"}),"\n","The ",(0,a.kt)("inlineCode",{parentName:"p"},"@ApiExtraModels")," decorator is used to define the response models.  "),(0,a.kt)("p",null,"The final response should either be an javascript Object or an array.\nWe do not return primitives like ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,a.kt)("p",null,"Swagger will automatically generate the response schema from the response object."))}d.isMDXComponent=!0}}]);