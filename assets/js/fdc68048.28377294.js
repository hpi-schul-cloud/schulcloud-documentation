"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[228],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>w});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),m=n,w=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return r?a.createElement(w,l(l({ref:t},u),{},{components:r})):a.createElement(w,l({ref:t},u))}));function w(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2113:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={},l="Local setup",i={unversionedId:"services/tldraw-server/Local setup",id:"services/tldraw-server/Local setup",title:"Local setup",description:"To run tldraw locally:",source:"@site/docs/services/tldraw-server/Local setup.md",sourceDirName:"services/tldraw-server",slug:"/services/tldraw-server/Local setup",permalink:"/docs/services/tldraw-server/Local setup",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/services/tldraw-server/Local setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How it works",permalink:"/docs/services/tldraw-server/How it works"},next:{title:"Technical details",permalink:"/docs/services/tldraw-server/Technical details"}},s={},c=[{value:"To run tldraw locally:",id:"to-run-tldraw-locally",level:3},{value:"Create new whiteboard:",id:"create-new-whiteboard",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"local-setup"},"Local setup"),(0,n.kt)("h3",{id:"to-run-tldraw-locally"},"To run tldraw locally:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Run redis i.e. in a docker container, it will work on localhost:6379 by default which is what the REDIS_URI env var is set to, for example on wsl: ",(0,n.kt)("a",{parentName:"li",href:"https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/"},"https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/")," ."),(0,n.kt)("li",{parentName:"ol"},"In the tldraw-server make a copy of .env.default and rename it to .env, in order to use the default configuration."),(0,n.kt)("li",{parentName:"ol"},"To run",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"npm run nest:start:dev (schulcloud-server)"),(0,n.kt)("li",{parentName:"ol"},"npm run nest:start:files-storage:dev (schulcloud-server with s3, if you want to upload files)"),(0,n.kt)("li",{parentName:"ol"},"npm run start:server:dev (tldraw-server)"),(0,n.kt)("li",{parentName:"ol"},"npm run start:worker:dev (tldraw-server)"),(0,n.kt)("li",{parentName:"ol"},"npm run dev (schulcloud-client)"),(0,n.kt)("li",{parentName:"ol"},"npm run servce (nuxt-client)"),(0,n.kt)("li",{parentName:"ol"},"npm run dev (tldraw-client)")))),(0,n.kt)("h3",{id:"create-new-whiteboard"},"Create new whiteboard:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Go to a course."),(0,n.kt)("li",{parentName:"ol"},"Go to 'Column board'."),(0,n.kt)("li",{parentName:"ol"},"Create a new card and a new 'Whiteboard' element within it, then click it."),(0,n.kt)("li",{parentName:"ol"},"A new browser tab with URL like: http://localhost:4000/tldraw?roomName=65c37329b2f97cc714d31c00 will open."),(0,n.kt)("li",{parentName:"ol"},"Change the port part from 4000 to 3046, which is the default port of tldraw-client app."),(0,n.kt)("li",{parentName:"ol"},"You should see a working tldraw whiteboard now.")))}d.isMDXComponent=!0}}]);