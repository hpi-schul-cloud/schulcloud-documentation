"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[3148],{474:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"frontend/Colors","title":"Colors","description":"In the Material Design system (the foundation of our component library), colors and color schemes are used to create a visual hierarchy, direct focus, and enhance the user experience.","source":"@site/docs/frontend/7_Colors.md","sourceDirName":"frontend","slug":"/frontend/Colors","permalink":"/docs/frontend/Colors","draft":false,"unlisted":false,"editUrl":"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/frontend/7_Colors.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Accessibility (A11y)","permalink":"/docs/frontend/Accessibility"},"next":{"title":"Identifying and Resolving Circular Dependencies","permalink":"/docs/frontend/IdentifyingAndResolvingCircularDependencies"}}');var r=o(4848),i=o(8453);const l={sidebar_position:8},t="Colors",a={},c=[{value:"Usage",id:"usage",level:2},{value:"Color Classes",id:"color-classes",level:3},{value:"Examples",id:"examples",level:4},{value:"Use Colors in (S)CSS",id:"use-colors-in-scss",level:3},{value:"Examples",id:"examples-1",level:4},{value:"&quot;On-Surface&quot; and &quot;On-Background&quot; Colors",id:"on-surface-and-on-background-colors",level:3},{value:"Definition Of Custom Colors",id:"definition-of-custom-colors",level:2},{value:"Rules",id:"rules",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"colors",children:"Colors"})}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.a,{href:"https://m2.material.io/design/color/the-color-system.html",children:"Material Design system"})," (the foundation of our component library), colors and color schemes are used to create a visual hierarchy, direct focus, and enhance the user experience."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find our custom defined theme colors under ",(0,r.jsx)(n.code,{children:"/src/themes/base-vuetify.options.ts"})," and their overwrites per theme in ",(0,r.jsx)(n.code,{children:"/src/themes/<theme_name>/vuetify.options.ts"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find the colors provided by Vuetify ",(0,r.jsx)(n.a,{href:"https://vuetifyjs.com/en/styles/colors/#colors",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"color-classes",children:"Color Classes"}),"\n",(0,r.jsxs)(n.p,{children:["All colors defined by Vuetify or in our Vuetify options generate CSS classes you can use. To apply a color variant like ",(0,r.jsx)(n.code,{children:"lighten-1"}),", add it to the color like ",(0,r.jsx)(n.code,{children:"grey-lighten-1"}),".\nBackgrounds have the ",(0,r.jsx)(n.code,{children:"bg-"}),"prefix and texts the ",(0,r.jsx)(n.code,{children:"text-"}),"prefix."]}),"\n",(0,r.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Using a color from Vuetify's color palette:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<div class="bg-blue">\n  Blue background\n</div>\n'})}),"\n",(0,r.jsx)(n.p,{children:"Using a color defined in our vuetify options as text color:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<p class="text-red">\n  Text has a red color\n</p>\n'})}),"\n",(0,r.jsx)(n.p,{children:"To use a variant of a color, you have to add the name of the variant seperated by hyphens:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<p class="text-red-darken-1">\n   Text has a darken variant of the red color\n</p>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"use-colors-in-scss",children:"Use Colors in (S)CSS"}),"\n",(0,r.jsxs)(n.p,{children:["For colors defined in our Vuetify options, Vuetify generates CSS variables.\nNow, custom properties are an rgb list, so we need to use ",(0,r.jsx)(n.code,{children:"rgba()"})," to access them."]}),"\n",(0,r.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scss",children:".alert {\n  background-color: rgba(var(--v-theme-primary-lighten-1));\n  color: rgba(var(--v-theme-primary));\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In Vuetify 2, we could only use hex values without the alpha property.\nWith Vuetify 3, it's now possible:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scss",children:".example{\n  background-color: rgba(var(--v-theme-primary), 0.12);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Colors from Vuetify's colors palette (as of now) do not get generated as CSS variables. You will need to access them with ",(0,r.jsx)(n.code,{children:"map-get"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scss",children:".alert {\n  background-color: map-get($grey, base);\n  color: map-get($blue, lighten-3);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"on-surface-and-on-background-colors",children:'"On-Surface" and "On-Background" Colors'}),"\n",(0,r.jsx)(n.p,{children:'"On" colors are important for making text, icons, and other elements recognizable and readable on various backgrounds.'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"on-surface"}),": Used for text, icons, and other elements that appear on top of a surface. Surfaces can include components like cards, dialogs, and menus."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"on-background"}),": Used for text, icons, and other elements that appear on the primary background of an application or a component"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We override the standard ",(0,r.jsx)(n.code,{children:"on-surface"})," and ",(0,r.jsx)(n.code,{children:"on-background"})," vuetify colors in our vuetify options and define them for each theme."]}),"\n",(0,r.jsx)(n.h2,{id:"definition-of-custom-colors",children:"Definition Of Custom Colors"}),"\n",(0,r.jsx)(n.p,{children:"You can define more custom colors in our vuetify options like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'options = {\n    // ...\n    colors: {\n        info: "#0a7ac9",\n        icon_btn: "colors.grey.darken3",\n        on_surface: "#0f3551",\n    }\n// ...\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Talk to UX before introducing a new color"}),"\n",(0,r.jsx)(n.li,{children:"Do not overwrite vuetify colors"}),"\n",(0,r.jsx)(n.li,{children:"Use a semantic name to represent the use case"}),"\n",(0,r.jsxs)(n.li,{children:["Prefer usage via ",(0,r.jsx)(n.code,{children:"map-get"})," over new color definition, unless you introduce a new color"]}),"\n",(0,r.jsx)(n.li,{children:"Either define style in template or in SCSS"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>t});var s=o(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);