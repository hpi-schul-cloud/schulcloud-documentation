"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[7727],{258:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/exception-hierarchy-9a191698c2329150114f974b886236da.svg"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},9907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"backend/Coding-Guidelines/exception-handling","title":"Exception Handling","description":"exception hierarchy","source":"@site/docs/backend/Coding-Guidelines/exception-handling.md","sourceDirName":"backend/Coding-Guidelines","slug":"/backend/Coding-Guidelines/exception-handling","permalink":"/docs/backend/Coding-Guidelines/exception-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/backend/Coding-Guidelines/exception-handling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Event Handling","permalink":"/docs/backend/Coding-Guidelines/event-handling"},"next":{"title":"Logging","permalink":"/docs/backend/Coding-Guidelines/logging"}}');var r=t(4848),o=t(8453);const s={},a="Exception Handling",c={},d=[{value:"Chaining errors with the <code>cause</code> property",id:"chaining-errors-with-the-cause-property",level:2},{value:"Loggable exceptions",id:"loggable-exceptions",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"exception-handling",children:"Exception Handling"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"exception hierarchy",src:t(258).A+"",width:"661",height:"591"})}),"\n",(0,r.jsx)(n.p,{children:"We separate our business exceptions from technical exceptions. While for technical exceptions, we use the predefined HTTPExceptions from NestJS, business exceptions inherit from abstract BusinessException."}),"\n",(0,r.jsx)(n.p,{children:"By default, implementations of BusinessException must define"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// ...\n{\n  code: 500,\n  type: "CUSTOM_ERROR_TYPE",\n  title: "Custom Error Type",\n  message: "Human readable details"\n  // additional: optionalData\n}\n// ...\n'})}),"\n",(0,r.jsx)(n.p,{children:"There is a GlobalErrorFilter provided to handle exceptions, which cares about the response format of exceptions and logging. It overrides the default NestJS APP_FILTER in the core/error-module."}),"\n",(0,r.jsx)(n.p,{children:"In client applications, for technical errors, evaluate the http-error-code, then for business exceptions, the type can be used as identifier and additional data can be evaluated."}),"\n",(0,r.jsx)(n.p,{children:"For business errors we use 409/conflict as default to clearly have all business errors with one error code identified."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Sample: For API validation errors, 400/Bad Request will be extended with ",(0,r.jsx)(n.code,{children:"validationError: ValidationError[{ field: string, error: string }]"})," and a custom type ",(0,r.jsx)(n.code,{children:"API_VALIDATION_ERROR"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Pipes can be used as input validation. To get errors reported in the correct format, they can define a custom exception factory when they should produce api validation error or other exceptions, handled by clients."}),"\n",(0,r.jsxs)(n.h2,{id:"chaining-errors-with-the-cause-property",children:["Chaining errors with the ",(0,r.jsx)(n.code,{children:"cause"})," property"]}),"\n",(0,r.jsxs)(n.p,{children:["If you catch an error and throw a new one, put the original error in the ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause",children:[(0,r.jsx)(n.code,{children:"cause"})," property"]})," of the new error. See example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"try {\n    someMethod();\n} catch(error) {\n    throw new ForbiddenException('some message', { cause: error });\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"loggable-exceptions",children:"Loggable exceptions"}),"\n",(0,r.jsxs)(n.p,{children:["If you want the error log to contain more information than just the exception message, use or create an exception which implements the ",(0,r.jsx)(n.code,{children:"Loggable"})," interface. Don't put data directly in the exception message!"]}),"\n",(0,r.jsxs)(n.p,{children:["A loggable exception should extend the respective ",(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/exception-filters#built-in-http-exceptions",children:"Built-in HTTP exception"}),' from NestJS. For the name just put in "Loggable" before the word "Exception", e.g. "BadRequestLoggableException". Except for logging a loggable exception behaves like any other exception, specifically the error response is not affected by this.']}),"\n",(0,r.jsx)(n.p,{children:"See example below."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"export class UnauthorizedLoggableException extends UnauthorizedException implements Loggable {\n    constructor(private readonly username: string, private readonly systemId?: string) {\n        super();\n    }\n\n    getLogMessage(): ErrorLogMessage {\n        const message = {\n            type: 'UNAUTHORIZED_EXCEPTION',\n            stack: this.stack,\n            data: {\n                userName: this.username,\n                systemId: this.systemId,\n            },\n        };\n\n        return message;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"export class YourService {\n    public sampleServiceMethod(username, systemId) {\n        throw new UnauthorizedLoggableException(username, systemId);\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);